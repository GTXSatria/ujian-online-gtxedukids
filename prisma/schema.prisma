// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  exams     Exam[]
  
  @@map("teachers")
}

model Student {
  id        String   @id @default(cuid())
  nisn      String   @unique
  name      String
  class     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  examResults ExamResult[]
  
  @@map("students")
}

model Exam {
  id          String   @id @default(cuid())
  code        String   @unique
  title       String
  description String?
  pdfUrl      String?
  duration    Int      // in minutes
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  questions   Question[]
  answerKeys  AnswerKey[]
  examResults ExamResult[]
  
  @@map("exams")
}

model Question {
  id          String   @id @default(cuid())
  examId      String
  questionText String
  options     String   // JSON string of options array
  questionNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  exam        Exam      @relation(fields: [examId], references: [id])
  
  @@map("questions")
}

model AnswerKey {
  id          String   @id @default(cuid())
  examId      String
  questionNumber Int
  correctAnswer String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  exam        Exam      @relation(fields: [examId], references: [id])
  
  @@map("answer_keys")
}

model ExamResult {
  id            String   @id @default(cuid())
  studentId     String
  examId        String
  score         Int
  totalQuestions Int
  correctAnswers Int
  answers       String   // JSON string of answers
  startTime     DateTime
  submitTime    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  student       Student  @relation(fields: [studentId], references: [id])
  exam          Exam     @relation(fields: [examId], references: [id])
  
  @@map("exam_results")
}